var DefaultOptions={debug:!0,wifi:{ssid:null,password:null},accessPoint:{ssidPrefix:"Vaxus-IOT",authMode:"open",password:""},alexa:{port:1900,httpPort:80},led:{namePrefix:"LIGHT",pwm:!1,pin:13,onValue:1,offValue:0,brightness:170},device:{pin:12,onValue:1}},EmptyFn=function(){},GUID_PREFIX="904bfa",Dgram=require("dgram"),Http=require("http"),Alexa,debug=function(){console.log.apply(null,arguments)};
function OnOff(a,c){var b=a.options.led;debug("OnOff "+c);a.onState=c;digitalWrite(a.options.device.pin,c?a.options.device.onValue:!a.options.device.onValue);[digitalWrite,analogWrite][~~b.pwm](b.pin,[b.offValue,[b.onValue,b.brightness][~~b.pwm]][~~c])}
function buildUDPSearchResponse(a,c){debug("---\nbuildUDPSearchResponse START");var b=["HTTP/1.1 200 OK\r\nCACHE-CONTROL: max-age=86400","DATE: "+(new Date).toGMTString(),"EXT:","LOCATION: http://"+a.ip+":"+a.options.alexa.httpPort+"/setup.xml",'OPT: "http://schemas.upnp.org/upnp/1/0/"); ns=01',"01-NLS: "+a.uuid,"SERVER: Unspecified, UPnP/1.0, Unspecified\r\nX-User-Agent: redsonic\r\nST: urn:Belkin:device:**","USN: uuid:Socket-1_0-"+a.serialNumber+"::urn:Belkin:device:**",""].join("\r\n");debug(["UDP message sent to address: "+
c.address+" port: "+c.port,"UDP message:",b,"buildUDPSearchResponse END\n---"].join("\n"));return b}
function buildSetupXmlResponse(a){debug("******************************************************\ndoSetupAnswerXML");a=['<?xml version="1.0"?>\r\n<root>\r\n<device>\r\n<deviceType>urn:OriginallyUS:device:controllee:1</deviceType>',"<friendlyName>"+a.friendlyName+"</friendlyName>","<manufacturer>Belkin International Inc.</manufacturer>\r\n<modelName>Emulated Socket</modelName>\r\n<modelNumber>1.0001</modelNumber>","<UDN>uuid:Socket-1_0-"+a.serialNumber+"</UDN>","</device>\r\n</root>"].join("\r\n");
debug("******************************************************");return a}function handleSetupGet(a){var c=buildSetupXmlResponse(this);a.writeHead(200,{"Content-Type":"text/xml","Content-Length":c.length,Date:(new Date).toGMTString(),"X-User-Agent":"redsonic",SERVER:"Unspecified, UPnP/1.0, Unspecified",Connection:"close","LAST-MODIFIED":"Sat, 01 Jan 2000 00:00:00 GMT"});a.end(c)}function handleUnknownGet(a){a.writeHead(200,{"Content-Type":"text/html"});a.end("Unknown GET command received")}
function handleGet(a,c,b){debug("Get received");[handleUnknownGet,handleSetupGet][~~("/setup.xml"===c.url)](b)}
function handleOtherUrlPost(a,c,b){debug(["Post OTHER URL "+c.url+" received","doPost STARTED"].join("\n"));var e=url.parse(c.url,!0),d=c.headers["Content-Length"];if(1024>d)c.on("data",function(c){a.cache.content+=c;a.cache.content.length===d&&(debug(["URL "+e,"XXX "+e.pathname,"Length "+d,"data= "+a.cache.content,"data length= "+a.cache.content.length].join("\n")),b.writeHead(200),b.end(a.cache.content),a.cache=Object.assign(a.cache,{content:""}))});else b.writeHead(413),b.end()}
function handleControlPost(a,c,b){debug("Post (/upnp/control/basicevent1) received, start special handling doPost_handleUpnpControl");c.on("data",function(e){a.cache.content+=e;if(a.cache.content.length===c.headers["Content-Length"]){var d=-1!==a.cache.content.indexOf("<u:SetBinaryState xmlns:u");var g=-1!==a.cache.content.indexOf("<u:GetBinaryState xmlns:u");e=-1!==a.cache.content.indexOf("<BinaryState>1</BinaryState>");var h=-1!==a.cache.content.indexOf("<BinaryState>0</BinaryState>");debug("*** STATUS RECEIVED: isSetStatus "+
d+", isGetStatus "+g+", isOn "+e+", isOff "+h);var f=a.cache.content;a.cache.content="";d||g||e||h?d?(d=getTime(),f=d-a.cache.lastTime,2>f?(debug("Command (SetBinaryState) ignored, last command received less than "+f+" seconds ago"),b.writeHead(400,{"Content-Type":"text/plain"}),b.end("Command (SetBinaryState) received too often - ignored")):(a.cache.lastTime=d,debug("Alexa is asking to turn "+(e?"ON":"OFF")+" a device"),OnOff(a,e))):(debug("Sending answer to GetBinaryState request"),f=f.replace("u:GetBinaryState",
"u:GetBinaryStateResponse").replace("<BinaryState>1</BinaryState>","<BinaryState>"+~~a.onState+"</BinaryState>").replace("<BinaryState>0</BinaryState>","<BinaryState>"+~~a.onState+"</BinaryState>"),debug("databack= "+f),b.writeHead(200,{"Content-Length":f.length,"Content-Type":"text/xml",SOAPACTION:"urn:Belkin:service:basicevent:1#GetBinaryStateResponse"}),b.end(f)):(debug(["Bad request from Amazon Echo",a.cache.content].join("\n")),b.writeHead(400,{"Content-Type":"text/plain"}),b.end("Bad request from Amazon Echo"))}})}
function handlePost(a,c,b){[handleOtherUrlPost,handleControlPost][~~("/upnp/control/basicevent1"===c.url)](a,c,b)}function onHttpRequest(a,c){debug(["onHttpRequest\n******************************************************","Req header= "+a.headers,"Req method= "+a.method,"Req length= "+a.headers["Content-Length"],"Req url= "+a.url,"******************************************************"].join("\n"));[handleGet,handlePost]["POST"===a.method](this,a,c)}
Alexa=function(a,c){var b=this,e,d;a.getIP(function(g,h){if(g)throw Error("Cant determine mac address");d=h.mac.split(":");c=Object.assign(DefaultOptions,c);debug=!0===c.debug?debug:EmptyFn;b.onState=0;b.options=c;b.cache={data:"",lastTime:0};b.uuid=[GUID_PREFIX].concat(d).join("-");b.serialNumber=parseInt(d.join("").slice(-5),16);b.friendlyName=b.options.led.namePrefix+"-"+b.serialNumber;b.udpServer=Dgram.createSocket({type:"udp4",multicastGroup:"239.255.255.250"});b.httpServer=Http.createServer(onHttpRequest.bind(b)).listen(b.options.alexa.httpPort);
debug("NAME: "+b.friendlyName,"SERIAL: "+b.serialNumber,"UUID: "+b.uuid);debug("startVAXIOT started");debug("Connect to WIFI ("+b.options.wifi.ssid+")");a.stopAP(function(){a.connect(b.options.wifi.ssid,{password:b.options.wifi.password},function(c){a.getIP(function(d,f){if(d)throw Error("Cant determine ip address");b.ip=f.ip;debug("connected? err="+c+" info="+f);debug("Start WIFI AP with name ("+b.options.accessPoint.ssidPrefix+" "+b.serialNumber+")");e={authMode:b.options.accessPoint.authMode,password:b.options.accessPoint.password};
a.startAP(b.options.accessPoint.ssidPrefix+" "+b.serialNumber,e,function(a){if(a)throw Error("Starting Access Point failed");b.udpServer.on("error",function(a){debug("server.on error",a);b.udpServer.close()});b.udpServer.on("message",function(a,c){debug("server.on UDP message received");debug(["---","<"+JSON.stringify(a),"<"+JSON.stringify(c),"---"].join("\n"));var d=buildUDPSearchResponse(b,c);b.udpServer.send(d,c.port,c.address);debug("server.on UDP response sent")});b.udpServer.bind(b.options.alexa.port)})})})})})};
module.exports=Alexa;
